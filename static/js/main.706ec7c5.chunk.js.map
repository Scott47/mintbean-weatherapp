{"version":3,"sources":["logo.svg","components/Weather.js","components/OpenWeatherApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","useState","zipcode","setZipcode","onSubmit","evt","preventDefault","getZipcode","type","value","onChange","e","target","WeatherGET","deg","myWeather","setMyWeather","getMyWeather","fetch","method","then","response","json","data","useEffect","className","main","class","name","Math","round","temp","id","weather","description","Date","sys","sunrise","toLocaleTimeString","sunset","src","icon","alt","feels_like","temp_max","temp_min","wind","direction","speed","humidity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.706ec7c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\n\nexport default function Weather(props) {\n  const [zipcode, setZipcode] = useState(\"\");\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      props.getZipcode(zipcode)\n  }\n\n  ///add button that calls props.getZipcode\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        Zipcode:\n        <input\n          type=\"text\"\n          value={zipcode}\n          onChange={e => setZipcode(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./OpenWeather.css\";\nimport Weather from \"./Weather\";\n\n//Author: Scott Silver\n//Purpose: Display Currency associated with fetch.\n//Methods: GET Currency\n\nconst WeatherGET = (props) => {\n  const [myWeather, setMyWeather] = useState({});\n\n  const getZipcode = (zipcode) => {\n    getMyWeather(zipcode);\n  };\n\n  const getMyWeather = (zipcode) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&appid=f8beefed0e999fac612802ea1139522d`,\n      {\n        method: \"GET\",\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setMyWeather(data);\n      });\n  };\n\n  const convertDeg = function(deg){\n    if (deg>11.25 && deg<33.75){\n      return \"NNE\";\n    }else if (deg>33.75 && deg<56.25){\n      return \"ENE\";\n    }else if (deg>56.25 && deg<78.75){\n      return \"E\";\n    }else if (deg>78.75 && deg<101.25){\n      return \"ESE\";\n    }else if (deg>101.25 && deg<123.75){\n      return \"ESE\";\n    }else if (deg>123.75 && deg<146.25){\n      return \"SE\";\n    }else if (deg>146.25 && deg<168.75){\n      return \"SSE\";\n    }else if (deg>168.75 && deg<191.25){\n      return \"S\";\n    }else if (deg>191.25 && deg<213.75){\n      return \"SSW\";\n    }else if (deg>213.75 && deg<236.25){\n      return \"SW\";\n    }else if (deg>236.25 && deg<258.75){\n      return \"WSW\";\n    }else if (deg>258.75 && deg<281.25){\n      return \"W\";\n    }else if (deg>281.25 && deg<303.75){\n      return \"WNW\";\n    }else if (deg>303.75 && deg<326.25){\n      return \"NW\";\n    }else if (deg>326.25 && deg<348.75){\n      return \"NNW\";\n    }else{\n      return \"N\";\n    }\n}\n\n  useEffect(() => {\n    getMyWeather(\"37207\");\n  }, []);\n\n  return (\n    <>\n    <h3>Search your weather in the United States by zip code </h3>\n      <Weather getZipcode={getZipcode} {...props} />\n      <div className=\"myWeather-Div\">\n        {myWeather.main ? (\n          <div className=\"container\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-auto\">\n              <table class=\"table-responsive\">\n                <thead>\n                  <tr>\n                    <th><h3>{myWeather.name}</h3></th>\n                    <th>\n                      {Math.round(\n                        ((myWeather.main.temp - 273.15) * 9) / 5 + 32\n                      )}\n                      Â° F\n                    </th>\n                    <td id=\"align-bottom\">\n                    {myWeather.weather[0].description}\n                    </td>\n                    <th></th>\n                    <th className=\"thead-sunrise\">\n                        ðŸŒ… Sunrise: {new Date(myWeather.sys.sunrise * 1000).toLocaleTimeString()}</th>\n                    <th className=\"thead-sunrise\">ðŸŒ‡ Sunset: {new Date(myWeather.sys.sunset * 1000).toLocaleTimeString()}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr className=\"weather-info\"><td>\n                      <img\n                        src={`http://openweathermap.org/img/wn/${myWeather.weather[0].icon}@2x.png`} alt=\"weather-icon\"\n                        />\n                    </td>\n\n                        <td id=\"align-bottom\"> Feels like: {Math.round((myWeather.main.feels_like - 273.15) * 9 /5 +32)}Â°</td>\n                        <td></td>\n                        <td></td>\n                    <td className=\"thead-sunrise\" id=\"align-bottom\">\n                        <br />\n                        High:{\" \"}\n                        {Math.round(\n                          ((myWeather.main.temp_max - 273.15) * 9) / 5 + 32\n                        )}\n                        Â°\n                      </td>\n                      <td className=\"thead-sunrise\" id=\"align-bottom\">\n                        Low:{\" \"}\n                        {Math.round(\n                          ((myWeather.main.temp_min - 273.15) * 9) / 5 + 32\n                        )}\n                        Â°\n                      </td>\n                  </tr>\n                  <tr>\n&emsp;\n                     <td>ðŸ’¨  Wind is {convertDeg(myWeather.wind.direction)} at {myWeather.wind.speed} mph  </td>\n                     &emsp;\n                     &emsp;\n                     <td>ðŸ’§ Humidity is {myWeather.main.humidity}%</td>\n                  </tr>\n                </tbody>\n              </table>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <p>There is no weather information for this zipcode</p>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default WeatherGET;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherGET from './components/OpenWeatherApi'\n\nfunction App() {\n  return (\n    <header>\n    <div className=\"App\">\n      <WeatherGET />\n\n    </div>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}