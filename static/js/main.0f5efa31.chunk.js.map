{"version":3,"sources":["logo.svg","components/Weather.js","components/OpenWeatherApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","props","useState","zipcode","setZipcode","city","setCity","onSubmit","evt","preventDefault","getMyCity","getZipcode","type","value","onChange","e","target","WeatherGET","deg","myWeather","setMyWeather","getMyWeather","fetch","method","then","response","json","data","useEffect","id","class","main","name","Math","round","temp","src","weather","icon","alt","description","Date","sys","sunrise","toLocaleTimeString","sunset","temp_max","temp_min","wind","direction","speed","humidity","pressure","toFixed","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f5efa31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\n\nexport default function Weather(props) {\n  const [zipcode, setZipcode] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n\n  const handleSubmit = (evt) => {\n      evt.preventDefault();\n      if (city != null) {\n        props.getMyCity(city)\n      }\n      else {\n        props.getZipcode(zipcode)\n      }\n  }\n//   const handleCitySubmit = (evt) => {\n//       evt.preventDefault();\n//       props.getMyCity(city)\n//   }\n\n  ///add button that calls props.getZipcode\n  return (\n    <form onSubmit={handleSubmit}>\n         <label>\n        City:\n        <input\n        //   onSubmit={handleCitySubmit}\n          type=\"text\"\n          value={city}\n          onChange={e => setCity(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n      <label>&emsp;\n        Zipcode:\n        <input\n\n          type=\"text\"\n          value={zipcode}\n          onChange={e => setZipcode(e.target.value)}\n        />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n\n    </form>\n  );\n}\n\n\n","import React, { useEffect, useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./OpenWeather.css\";\nimport Weather from \"./Weather\";\n\n//Author: Scott Silver\n//Purpose: Display current weather associated.\n//Methods: GET Current Weather\n\nconst WeatherGET = (props) => {\n  const [myWeather, setMyWeather] = useState({});\n  const [myCity, setMyCity] = useState({});\n\n  const getZipcode = (zipcode) => {\n    getMyWeather(zipcode);\n  };\n\n  const getMyWeather = (zipcode) => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?zip=${zipcode},us&appid=f8beefed0e999fac612802ea1139522d`,\n      {\n        method: \"GET\",\n      }\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setMyWeather(data);\n      });\n  };\n  const getMyCity = (city) => {\n      fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=f8beefed0e999fac612802ea1139522d`,\n          {\n              method: \"GET\"\n          })\n          .then((response) => response.json())\n          .then((data) => {\n              setMyWeather(data)\n          })\n  }\n\n  const convertDeg = function (deg) {\n    if (deg > 11.25 && deg < 33.75) {\n      return \"NNE\";\n    } else if (deg > 33.75 && deg < 56.25) {\n      return \"ENE\";\n    } else if (deg > 56.25 && deg < 78.75) {\n      return \"E\";\n    } else if (deg > 78.75 && deg < 101.25) {\n      return \"ESE\";\n    } else if (deg > 101.25 && deg < 123.75) {\n      return \"ESE\";\n    } else if (deg > 123.75 && deg < 146.25) {\n      return \"SE\";\n    } else if (deg > 146.25 && deg < 168.75) {\n      return \"SSE\";\n    } else if (deg > 168.75 && deg < 191.25) {\n      return \"S\";\n    } else if (deg > 191.25 && deg < 213.75) {\n      return \"SSW\";\n    } else if (deg > 213.75 && deg < 236.25) {\n      return \"SW\";\n    } else if (deg > 236.25 && deg < 258.75) {\n      return \"WSW\";\n    } else if (deg > 258.75 && deg < 281.25) {\n      return \"W\";\n    } else if (deg > 281.25 && deg < 303.75) {\n      return \"WNW\";\n    } else if (deg > 303.75 && deg < 326.25) {\n      return \"NW\";\n    } else if (deg > 326.25 && deg < 348.75) {\n      return \"NNW\";\n    } else {\n      return \"N\";\n    }\n  };\n\n  useEffect(() => {\n    getMyWeather(\"37207\");\n    getMyCity(\"Nashville\")\n  }, []);\n\n  return (\n    <>\n    <section id=\"background\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col sm\">\n            <div class=\"card\">\n              <h5 class=\"card-header\">\n                Search for current weather by city or zipcode\n              </h5>\n              <div class=\"card-body\">\n                <Weather getZipcode={getZipcode} {...props} getMyCity={getMyCity} {...props} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"container\">\n        {myWeather.main ? (\n          <div class=\"row\">\n            <div class=\"col sm-6\">\n              <div class=\"card\">\n                <div class=\"card-header card-header1\">\n                  <h5 class=\"\">Weather today in {myWeather.name}</h5>\n                  <div class=\"row\">\n                  <div class=\"col sm\">\n                      <h3>{Math.round(\n                        ((myWeather.main.temp - 273.15) * 9) / 5 + 32\n                      )}\n                      Â° F\n                      <img\n                        src={`http://openweathermap.org/img/wn/${myWeather.weather[0].icon}@2x.png`}\n                        alt=\"weather-icon\"\n                      />\n                      </h3>\n                      {myWeather.weather[0].description}\n                    </div>\n                    <div class=\"col sm-6\">\n                      <p id=\"sunrise\">\n                        {\" \"}\n                        ðŸŒ… Sunrise:{\" \"}\n                        {new Date(\n                          myWeather.sys.sunrise * 1000\n                        ).toLocaleTimeString()}\n                      </p>\n                      <p id=\"sunrise\">\n                        ðŸŒ‡ Sunset:{\" \"}\n                        {new Date(\n                          myWeather.sys.sunset * 1000\n                        ).toLocaleTimeString()}\n                      </p>\n                      {/* closes out sunrise/sunset */}\n                    </div>\n                  </div>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row\">\n                    <div class=\"col sm-4\">\n                      <strong>ðŸŒ¡ High/Low:</strong>{\" \"}\n                    </div>\n                    <div class=\"col sm-4\">\n                      {Math.round(\n                        ((myWeather.main.temp_max - 273.15) * 9) / 5 + 32\n                      )}\n                      Â°/\n                      {Math.round(\n                        ((myWeather.main.temp_min - 273.15) * 9) / 5 + 32\n                      )}\n                      Â°\n                    </div>\n                    <div class=\"col sm-4\">\n                      <strong>ðŸ’¨ Wind:</strong>\n                    </div>\n                    <div class=\"col sm-4\">\n                      {convertDeg(myWeather.wind.direction)} at{\" \"}\n                      {myWeather.wind.speed} mph\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col sm-4\">\n                      ðŸ’§ <strong>Humidity:</strong>\n                    </div>\n                    <div class=\"col sm-4\">{myWeather.main.humidity}%</div>\n                    <div class=\"col sm-4\">\n                      <strong>\n                        <img\n                          src=\"https://img.icons8.com/ios/50/000000/atmospheric-pressure.png\"\n                          alt=\"air-pressure\"\n                          id=\"air\"\n                        />{\" \"}\n                        Pressure:{\" \"}\n                      </strong>\n                    </div>\n                    <div class=\"col sm-4\">{myWeather.main.pressure * 0.030.toFixed(2)} in.</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <p>There is no weather information for this zipcode</p>\n        )}\n      </div>\n    </section>\n    </>\n  );\n};\n\nexport default WeatherGET;\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport WeatherGET from './components/OpenWeatherApi'\n\nfunction App() {\n  return (\n    <header>\n    <div className=\"App\">\n      <WeatherGET />\n\n    </div>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}